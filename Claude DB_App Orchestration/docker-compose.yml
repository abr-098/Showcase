services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-construction}
      TZ: ${TZ:-Asia/Kolkata}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-construction}"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build: .
    restart: always
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${EXTERNAL_PORT:-5001}:${APP_PORT:-5000}"
    environment:
      - FLASK_ENV=${FLASK_ENV:-development}
      - FLASK_DEBUG=${FLASK_DEBUG:-true}
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-construction}}
      - TZ=${TZ:-Asia/Kolkata}
      - SECRET_KEY=${SECRET_KEY:-dev-key-change-in-production}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
    volumes:
      - .:/app
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT:-5000}/test-db"]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      TZ: ${TZ:-Asia/Kolkata}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - db
    volumes:
      - ./servers.json:/pgadmin4/servers.json
      - pgadmin_data:/var/lib/pgadmin
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  # Database Backup Service - Manual and Scheduled
  db-backup:
    image: postgres:15
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-construction}
      TZ: ${TZ:-Asia/Kolkata}
    volumes:
      - ./db_backup:/backup
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - backup
    command: >
      sh -c "
        mkdir -p /backup &&
        BACKUP_DATE=$$(date +%F) &&
        echo 'Creating database backup for date: $$BACKUP_DATE' &&
        pg_dump -h db -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-construction} 
          --verbose --clean --create --if-exists 
          --format=tar --compress=9 
          --file=/backup/backup_$$BACKUP_DATE.tar &&
        echo 'Backup completed: /backup/backup_$$BACKUP_DATE.tar' &&
        ls -la /backup/backup_$$BACKUP_DATE.tar
      "

  # Automated Hourly Backup Service
  db-backup-scheduler:
    image: postgres:15
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-construction}
      TZ: ${TZ:-Asia/Kolkata}
    volumes:
      - ./db_backup:/backup
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - scheduler
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Starting automated hourly backup scheduler...' &&
        mkdir -p /backup &&
        while true; do
          BACKUP_DATE=$$(date +%F) &&
          BACKUP_TIME=$$(date +%H%M) &&
          BACKUP_FILE=/backup/backup_$${BACKUP_DATE}_$${BACKUP_TIME}.tar &&
          echo \"$$(date): Creating scheduled backup: $$BACKUP_FILE\" &&
          pg_dump -h db -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-construction} 
            --verbose --clean --create --if-exists 
            --format=tar --compress=9 
            --file=$$BACKUP_FILE &&
          echo \"$$(date): Backup completed: $$BACKUP_FILE\" &&
          echo \"$$(date): Backup size: $$(du -h $$BACKUP_FILE | cut -f1)\" &&
          echo \"$$(date): Waiting 1 hour for next backup...\" &&
          sleep 3600
        done
      "

volumes:
  postgres_data:
  pgadmin_data: 